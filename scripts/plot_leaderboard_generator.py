"""
Plot Leaderboard Generator
Ranks plots by complexity and displays a leaderboard in HTML.
"""

import json
from pathlib import Path

gallery_path = Path("leaderboard.html")
plots_dir = Path("plots")

html_header = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yellorn Plot Leaderboard</title>
    <style>
        body { font-family: sans-serif; background: #181825; color: #fff; margin: 0; padding: 0; }
        .leaderboard { max-width: 800px; margin: 2rem auto; background: #232347; border-radius: 1rem; box-shadow: 0 2px 8px #0004; padding: 2rem; }
        h1 { text-align: center; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 0.7rem 1rem; text-align: left; }
        th { background: #2d2d5a; }
        tr:nth-child(even) { background: #20203a; }
        .score { font-weight: bold; color: #7ee787; }
    </style>
</head>
<body>
    <h1>Yellorn Plot Leaderboard</h1>
    <div class="leaderboard">
    <table>
        <tr><th>Rank</th><th>Plot Name</th><th>Agent ID</th><th>Complexity Score</th></tr>
"""

html_footer = """
    </table>
    <footer style="text-align:center; color:#888; margin:2rem 0;">Generated by Yellorn Copilot</footer>
    </div>
</body>
</html>
"""


def plot_complexity(plot):
    # Simple heuristic: more fields, more code, more animation = higher score
    score = 0
    viz = plot.get("visualization", {})
    style = viz.get("style", {})
    code = viz.get("code", {})
    animation = viz.get("animation", {})
    score += len(plot.keys()) * 2
    score += len(style.keys())
    score += len(code.keys()) * 3
    score += len(animation.keys()) * 2
    score += sum(len(str(v)) for v in code.values()) // 1000  # 1pt per 1k chars
    return score


rows = []
plots = []
for plot_file in plots_dir.glob("*.json"):
    try:
        with open(plot_file) as f:
            plot = json.load(f)
        plots.append((plot_file.name, plot))
    except Exception:
        continue

# Sort by complexity
ranked = sorted(plots, key=lambda x: plot_complexity(x[1]), reverse=True)

for idx, (fname, plot) in enumerate(ranked, 1):
    rows.append(
        f"<tr><td>{idx}</td><td>{plot.get('name', fname)}</td><td>{plot.get('agent_id', 'N/A')}</td><td class='score'>{plot_complexity(plot)}</td></tr>"
    )

with open(gallery_path, "w") as f:
    f.write(html_header)
    f.write("\n".join(rows))
    f.write(html_footer)

print(f"âœ… Plot leaderboard generated: {gallery_path}")
