version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: yellorn-database
    environment:
      POSTGRES_DB: yellorn
      POSTGRES_USER: yellorn
      POSTGRES_PASSWORD: yellorn_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yellorn"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yellorn-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yellorn-backend
    environment:
      - DATABASE_URL=postgresql://yellorn:yellorn_dev_password@database:5432/yellorn
      - ENVIRONMENT=development
      - DEBUG=true
      - ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/.venv  # Exclude virtual environment from bind mount
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - yellorn-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder  # Use development stage
    container_name: yellorn-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true  # For hot reload in Docker
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Exclude node_modules from bind mount
    command: npm start
    networks:
      - yellorn-network

  # Redis (for future caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: yellorn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - yellorn-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  yellorn-network:
    driver: bridge
